{
  "permissions": {
    "allow": [
      "Bash(python test:*)",
      "Bash(python:*)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(conda info:*)",
      "Bash(C:Userscasparanaconda3Scriptsconda.exe info --envs)",
      "Bash(cmd /c:*)",
      "Bash(echo $CONDA_DEFAULT_ENV)",
      "Bash(conda activate:*)",
      "Bash(source:*)",
      "Bash(echo $SHELL)",
      "Bash(echo $PATH)",
      "Bash(pwsh:*)",
      "WebFetch(domain:github.com)",
      "Bash(mkdir:*)",
      "Bash(cp:*)",
      "Bash(find:*)",
      "Bash(git rm:*)",
      "Bash(git add:*)",
      "Bash(conda:*)",
      "Bash(uv:*)",
      "Bash(C:Userscasparanaconda3Scriptsconda.exe activate videoannotator)",
      "Bash(where cmake)",
      "Bash(make:*)",
      "Bash($env:PATH)",
      "Bash(curl:*)",
      "Bash(VIDEOANNOTATOR_DB_PATH=\"test_api_db.db\" uv run python -c \"\nimport requests\nimport subprocess\nimport time\nimport os\nfrom pathlib import Path\n\n# Set environment variable\nos.environ[''VIDEOANNOTATOR_DB_PATH''] = ''test_api_db.db''\n\n# Start server in background\nserver_process = subprocess.Popen(\n    [''uv'', ''run'', ''python'', ''-m'', ''src.cli'', ''server'', ''--port'', ''8004''],\n    stdout=subprocess.PIPE,\n    stderr=subprocess.PIPE,\n    env=os.environ.copy()\n)\n\ntry:\n    # Wait for server to start\n    time.sleep(4)\n    \n    # Test job submission\n    test_content = b''fake video content for testing''\n    files = {''video'': (''test_video.mp4'', test_content, ''video/mp4'')}\n    data = {''selected_pipelines'': ''scene,person''}\n    \n    response = requests.post(''http://localhost:8004/api/v1/jobs/'', files=files, data=data, timeout=10)\n    \n    print(f''Job submission status: {response.status_code}'')\n    if response.status_code == 201:\n        job_data = response.json()\n        job_id = job_data[''id'']\n        print(f''Job created successfully! ID: {job_id}'')\n        print(f''Status: {job_data[\"\"status\"\"]}'')\n        print(f''Pipelines: {job_data[\"\"selected_pipelines\"\"]}'')\n        \n        # Test job retrieval\n        response = requests.get(f''http://localhost:8004/api/v1/jobs/{job_id}'', timeout=5)\n        if response.status_code == 200:\n            print(''Job retrieval successful!'')\n        \n        # Test job listing\n        response = requests.get(''http://localhost:8004/api/v1/jobs/'', timeout=5)\n        if response.status_code == 200:\n            jobs_data = response.json()\n            print(f''Job listing successful! Total jobs: {jobs_data[\"\"total\"\"]}'')\n        \n        print(''All API tests passed!'')\n    else:\n        print(f''Job submission failed: {response.text}'')\n        \nfinally:\n    # Clean up\n    server_process.terminate()\n    server_process.wait()\n\")",
      "Bash(grep:*)"
    ],
    "deny": []
  }
}