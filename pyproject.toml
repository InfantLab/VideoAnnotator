[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "videoannotator"
version = "1.1.2"
description = "A modern, modular toolkit for analyzing, processing, and visualizing human interaction videos"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "VideoAnnotator Team", email = "info@videoannotator.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Video",
    "Topic :: Scientific/Engineering :: Image Processing",
]
requires-python = ">=3.8,<3.13"
dependencies = [
    # Core dependencies - Python 3.12 Compatible
    "fastapi>=0.115.0",
    "ipython>=8.12.3",
    "librosa>=0.10.0",
    "matplotlib>=3.9.2",
    "moviepy>=1.0.3",
    "opencv-python>=4.10.0.84",
    "openai-whisper>=20231117",
    "openpyxl",
    "pandas>=2.2.2",
    "Pillow>=10.4.0",
    "pytest>=8.3.2",
    "python-dotenv>=1.0.1",
    "numpy>=1.24.0",
    "tqdm>=4.65.0",
    
    # Video and computer vision - YOLO11 and detection
    "ultralytics>=8.3.0",
    "supervision>=0.16.0",
    # Note: PyTorch with CUDA should be installed separately
    "torch>=2.0.0",  # CUDA version installed separately
    "torchvision>=0.15.0",  # CUDA version installed separately
    "timm>=0.9.0",
    
    # Audio processing - Core packages that should work
    "pyannote.audio>=3.3.2",
    "pyannote.core>=5.0.0",
    "pyannote.database>=5.1.0",
    "pyannote.metrics>=3.2.1",
    "pyannote.pipeline>=3.0.1",
    "torchaudio>=2.0.0",  # CUDA version installed separately
    
    # Scene detection and video understanding
    "scenedetect[opencv]>=0.6.3",
    "transformers>=4.40.0",
    # clip-by-openai - Not compatible with Python 3.12 and modern PyTorch
    "sentence-transformers>=2.2.0",
    
    # Face analysis - Limited set for Python 3.12
    # deepface>=0.0.91 - Not compatible with Python 3.12 due to TensorFlow dependency
    # face-recognition>=1.3.0 - Has compatibility issues
    # mediapipe>=0.10.0 - Removed due to compatibility issues and slow Google updates (use DeepFace instead)
    # fer>=22.5.0 - Has compatibility issues
    # insightface>=0.7.3 - Has compatibility issues
    "dlib>=19.24.0",
    "imutils>=0.5.4",
    # Note: cmake>=3.22.0 is installed via conda
    
    # Additional ML/AI tools
    "openai>=1.0.0",
    "huggingface-hub>=0.20.0",
    "accelerate>=0.20.0",
    "datasets>=2.16.0",
    # langchain packages removed due to compatibility issues
    
    # Data processing and visualization
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "networkx>=3.1",
    "pydantic>=2.0.0",
    "typer>=0.9.0",
    
    # Additional video processing
    "imageio>=2.31.0",
    "imageio-ffmpeg>=0.4.8",
    "av>=10.0.0",
    
    # Multimodal and advanced AI
    "open-clip-torch>=2.24.0",
    # clip-interrogator removed due to compatibility issues
    
    # Database and storage
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    
    # Configuration and utilities
    "pyyaml>=6.0.0",
    "rich>=13.0.0",
    "click>=8.0.0",
    "requests>=2.31.0",
    "packaging>=21.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.5.0",
]
annotation = [
    # Note: These packages have compatibility issues with Python 3.12
    # "label-studio-sdk>=0.0.32",
    # "fiftyone>=0.23.0",
    # "roboflow>=1.1.0",
]
all = [
    "videoannotator[dev,annotation]"
]

[project.urls]
Homepage = "https://github.com/your-org/VideoAnnotator"
Documentation = "https://github.com/your-org/VideoAnnotator/wiki"
Repository = "https://github.com/your-org/VideoAnnotator"
Issues = "https://github.com/your-org/VideoAnnotator/issues"

[project.scripts]
videoannotator = "main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (cross-component)", 
    "pipeline: Full pipeline tests (slow)",
    "performance: Performance and benchmark tests",
    "experimental: Experimental and research tests",
    "slow: Tests that take >10 seconds",
    "gpu: Tests requiring GPU acceleration",
    "real_models: Tests using real ML models",
    "meta: marks tests as meta-tests for testing test infrastructure",
    "asyncio: marks tests as requiring asyncio support",
]

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2",
    "whisper", 
    "pyannote.*",
    "ultralytics",
    "sentence_transformers",
    "librosa",
    "moviepy.*",
    "scenedetect.*",
    "transformers",
    "torch",
    "torchvision",
    "torchaudio",
    "supervision",
    "timm",
    "dlib",
    "imutils",
    "datasets",
    "openai",
    "huggingface_hub",
    "accelerate",
    "plotly.*",
    "seaborn",
    "networkx",
    "imageio",
    "av",
    "open_clip_torch",
    "sqlalchemy",
    "alembic",
]
ignore_missing_imports = true

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".tox",
    ".eggs",
    "*.egg",
]
